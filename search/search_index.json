{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Generalidades \u00b6 Bluetooth es una especificaci\u00f3n industrial para redes inal\u00e1mbricas de \u00e1rea personal (WPAN) que permite la transmisi\u00f3n de voz y datos entre diferentes dispositivos emparejados mediante un enlace por radiofrecuencia en la banda ISM de 2.4 GHz. Su logotipo lo vemos en la imagen siguiente: Logotipo Bluetooth con texto Logotipo Bluetooth El canal de comunicaci\u00f3n que define la especificaci\u00f3n de Bluetooth establece m\u00e1ximo 720 kbit/s con rango \u00f3ptimo de 10 metros. Transmitir a 10 metros de distancia requiere una potencia de salida de 1 mW (0 dBm). Los principales objetivos que se pueden conseguir con esta norma son: Facilitar las comunicaciones entre equipos m\u00f3viles. Eliminar los cables y conectores entre equipos. Facilitar la sincronizaci\u00f3n de datos entre equipos personales. Estamos ya muy acostumbrados a disponer de estos dispositivos en los sectores de las telecomunicaciones y la inform\u00e1tica personal, en aparatos como PDAs, tel\u00e9fonos m\u00f3viles, ordenadores port\u00e1tiles y personales, impresoras, c\u00e1maras digitales, etc. Tipos de m\u00f3dulos \u00b6 Empezaremos diciendo que existen multitud de m\u00f3dulos Bluetooth comerciales y muchos de ellos los podemos utilizar en nuestras placas tipo Arduino, ESP32, etc. Los dispositivos dotados de un m\u00f3dulo Bluetooth JY-MCU van montados sobre una placa con un regulador de tensi\u00f3n que nos permite conectarlo a una tensi\u00f3n de entrada entre 3,6v a 6v. De esta forma nos despreocupamos de la tensi\u00f3n a los 3,3v en los que trabaja el dispositivo. Los dos m\u00f3dulos que vamos a ver son los denominados HC-05 y HC-06 de los que podemos ver diferentes tipos como los mostrados en las im\u00e1genes siguiente: HC-05 HC-05 HC-05 HC-06 HC-06 Estos m\u00f3dulos son peque\u00f1os, compactos, de bajo consumo, muy econ\u00f3micos y por f\u00e1ciles de encontrar en el mercado. El HC-05 puede trabajar como maestro/esclavo y el HC-06 solo puede actuar como esclavo. La diferencia entre maestro y esclavo es que en modo esclavo es nuestro dispositivo el que se conecta al m\u00f3dulo HC-05, mientras que en modo maestro es el m\u00f3dulo HC-06 el que se conecta con nuestro dispositivo, o con otros m\u00f3dulos. En las im\u00e1genes anteriores vemos que ambos son muy parecidos aunque f\u00e1ciles de diferenciar dado que el HC-05 dispone de 6 pines y el HC-06 solamente de 4 pines. En la tabla siguiente se relacionan la funci\u00e7on de cada pin y a que tipo de pin de Arduino debemos conectarlo. Nombre y funci\u00f3n Pin Arduino HC-05 HC-06 VCC - Alimentaci\u00f3n de 3,6 a 6V Pin digital VCC VCC GND - Masa GND GND GND TX - Transmisi\u00f3n datos serie Pin digital TX TX RX - Recepci\u00f3n de datos serie Pin digital RX RX Enable/Key - Habilitaci\u00f3n configuraci\u00f3n Pin digital EN/KEY -- STATE/LED - Estado de salida (*Nota) No conectado STATE/LED -- (*Nota): Se puede conectar un LED al pin y visualizar cuando se comunica el m\u00f3dulo En los enlaces siguientes tenemos disponibles los datasheet de ambos m\u00f3dulos, donde podemos consultar todas sus caracter\u00edsticas. Modulo Bluetooth HC-05 Modulo Bluetooth HC-06 Adem\u00e1s de la diferencia en el n\u00famero de pines tambi\u00e9n hay una diferencia fundamental en el firmware, o lo que es lo mismo, la programaci\u00f3n interna del m\u00f3dulo. Ambos m\u00f3dulos se pueden programar mediante comandos AT (los vemos en el apartado correspondiente). El m\u00f3dulo HC-06 entra en modo programaci\u00f3n siempre que lo encendemos y que no est\u00e9 conectado al mismo ning\u00fan dispositivo. En cambio el m\u00f3dulo HC-05 requiere un modo de arranque determinado para entrar en modo programaci\u00f3n.","title":"Introducci\u00f3n"},{"location":"#generalidades","text":"Bluetooth es una especificaci\u00f3n industrial para redes inal\u00e1mbricas de \u00e1rea personal (WPAN) que permite la transmisi\u00f3n de voz y datos entre diferentes dispositivos emparejados mediante un enlace por radiofrecuencia en la banda ISM de 2.4 GHz. Su logotipo lo vemos en la imagen siguiente: Logotipo Bluetooth con texto Logotipo Bluetooth El canal de comunicaci\u00f3n que define la especificaci\u00f3n de Bluetooth establece m\u00e1ximo 720 kbit/s con rango \u00f3ptimo de 10 metros. Transmitir a 10 metros de distancia requiere una potencia de salida de 1 mW (0 dBm). Los principales objetivos que se pueden conseguir con esta norma son: Facilitar las comunicaciones entre equipos m\u00f3viles. Eliminar los cables y conectores entre equipos. Facilitar la sincronizaci\u00f3n de datos entre equipos personales. Estamos ya muy acostumbrados a disponer de estos dispositivos en los sectores de las telecomunicaciones y la inform\u00e1tica personal, en aparatos como PDAs, tel\u00e9fonos m\u00f3viles, ordenadores port\u00e1tiles y personales, impresoras, c\u00e1maras digitales, etc.","title":" Generalidades "},{"location":"#tipos-de-modulos","text":"Empezaremos diciendo que existen multitud de m\u00f3dulos Bluetooth comerciales y muchos de ellos los podemos utilizar en nuestras placas tipo Arduino, ESP32, etc. Los dispositivos dotados de un m\u00f3dulo Bluetooth JY-MCU van montados sobre una placa con un regulador de tensi\u00f3n que nos permite conectarlo a una tensi\u00f3n de entrada entre 3,6v a 6v. De esta forma nos despreocupamos de la tensi\u00f3n a los 3,3v en los que trabaja el dispositivo. Los dos m\u00f3dulos que vamos a ver son los denominados HC-05 y HC-06 de los que podemos ver diferentes tipos como los mostrados en las im\u00e1genes siguiente: HC-05 HC-05 HC-05 HC-06 HC-06 Estos m\u00f3dulos son peque\u00f1os, compactos, de bajo consumo, muy econ\u00f3micos y por f\u00e1ciles de encontrar en el mercado. El HC-05 puede trabajar como maestro/esclavo y el HC-06 solo puede actuar como esclavo. La diferencia entre maestro y esclavo es que en modo esclavo es nuestro dispositivo el que se conecta al m\u00f3dulo HC-05, mientras que en modo maestro es el m\u00f3dulo HC-06 el que se conecta con nuestro dispositivo, o con otros m\u00f3dulos. En las im\u00e1genes anteriores vemos que ambos son muy parecidos aunque f\u00e1ciles de diferenciar dado que el HC-05 dispone de 6 pines y el HC-06 solamente de 4 pines. En la tabla siguiente se relacionan la funci\u00e7on de cada pin y a que tipo de pin de Arduino debemos conectarlo. Nombre y funci\u00f3n Pin Arduino HC-05 HC-06 VCC - Alimentaci\u00f3n de 3,6 a 6V Pin digital VCC VCC GND - Masa GND GND GND TX - Transmisi\u00f3n datos serie Pin digital TX TX RX - Recepci\u00f3n de datos serie Pin digital RX RX Enable/Key - Habilitaci\u00f3n configuraci\u00f3n Pin digital EN/KEY -- STATE/LED - Estado de salida (*Nota) No conectado STATE/LED -- (*Nota): Se puede conectar un LED al pin y visualizar cuando se comunica el m\u00f3dulo En los enlaces siguientes tenemos disponibles los datasheet de ambos m\u00f3dulos, donde podemos consultar todas sus caracter\u00edsticas. Modulo Bluetooth HC-05 Modulo Bluetooth HC-06 Adem\u00e1s de la diferencia en el n\u00famero de pines tambi\u00e9n hay una diferencia fundamental en el firmware, o lo que es lo mismo, la programaci\u00f3n interna del m\u00f3dulo. Ambos m\u00f3dulos se pueden programar mediante comandos AT (los vemos en el apartado correspondiente). El m\u00f3dulo HC-06 entra en modo programaci\u00f3n siempre que lo encendemos y que no est\u00e9 conectado al mismo ning\u00fan dispositivo. En cambio el m\u00f3dulo HC-05 requiere un modo de arranque determinado para entrar en modo programaci\u00f3n.","title":" Tipos de m\u00f3dulos "},{"location":"at-05/","text":"Montajes y establecimiento de conexi\u00f3n \u00b6 En el caso del m\u00f3dulo HC-05 debemos proceder de manera diferente en funci\u00f3n de que el m\u00f3dulo disponga o no de un bot\u00f3n pulsador que permita establecer la comunicaci\u00f3n Bluetooth con el mismo. M\u00f3dulo Bluetooth HC-05 CON bot\u00f3n \u00b6 Para este caso el montaje que debemos realizar lo vemos en la imagen siguiente: Conexi\u00f3n Arduino Nano-HC05 con bot\u00f3n pulsador El programa que podemos grabar en el Nano para esta ocasi\u00f3n lo vamos a diferenciar, creando uno para cada modo de funcionamiento. Modo AT2 . El programa es el siguiente: #include <SoftwareSerial.h> // Definimos una conexi\u00f3n utilizando la librer\u00eda SoftwareSerial conex_BT(10, 11); // Recuerda cruzar RX con TX void setup(){ Serial.begin(9600); // Velocidad de comunicaci\u00f3n con el monitor serie Serial.println(\"Alimentamos el modulo HC-05 mientras se mantiene presionado el pulsador\"); Serial println(\"De esta forma se habilita el modo AT2\"); Serial.println(\"El LED parpadea lentamente y el m\u00f3dulo listo para trabajar con comandos AT:\"); conex_BT.begin(38400); // Inicializa el puerto serie o consola } void loop(){ if (conex_BT.available()) Serial.write(conex_BT.read()); if (Serial.available()) conex_BT.write(Serial.read()); } Una vez subido el programa a nuestra placa tomamos el m\u00f3dulo BT y accionamos el pulsador y sin soltarlo procedemos a conectar la placa al puerto USB para alimentar ambos dispositivos. Tras un instante podemos observar que el LED parpadea lentamente indicando que estamos en modo AT2 y que podemos enviar comandos AT al mismo. En la imagen siguiente vemos el resultado de comprobar que todo es correcto obteniendo el primer OK como respuesta al comando AT. Tambi\u00e9n vemos la respuesta a otros comandos. Respuesta al comando AT en modo AT2 Ya podemos enviar cualquier comando AT de los que vemos en el apartado correspondiente. Modo AT1 . El programa que vamos a utilizar es el siguiente: #include <SoftwareSerial.h> // Definimos una conexi\u00f3n utilizando la librer\u00eda SoftwareSerial conex_BT(10, 11); // Recuerda cruzar RX con TX void setup(){ Serial.begin(9600); // Velocidad de comunicaci\u00f3n con el monitor serie Serial.println(\"Alimentamos el modulo HC-05\"); Serial.println(\"Accionamos el pulsador para entrar en el modo AT1\"); Serial.println(\"El LED continua parpadeando r\u00e1pidamente y el m\u00f3dulo est\u00e1 listo para trabajar con comandos AT\"); conex_BT.begin(115200); // Velocidad a la que est\u00e1 configurado el m\u00f3dulo } void loop(){ if (conex_BT.available()) Serial.write(conex_BT.read()); if (Serial.available()) conex_BT.write(Serial.read()); } Disponemos de un m\u00f3dulo previamente configurado a 115200 baudios, raz\u00f3n por la que ponemos la instrucci\u00f3n conex_BT.begin(115200); . Una vez subido el programa pulsamos el bot\u00f3n y probamos el funcionamiento, tal y como vemos en la imagen siguiente: Respuesta al comando AT en modo AT1 M\u00f3dulo Bluetooth HC-05 SIN bot\u00f3n \u00b6 Recordemos que para este caso debemos montar el circuito de la imagen siguiente: Conexi\u00f3n Arduino Nano-HC05 sin bot\u00f3n pulsador Para poder trabajar vamos a crear en el IDE de Arduino un programa como el siguiente: #include <SoftwareSerial.h> // Definimos una conexi\u00f3n utilizando la librer\u00eda SoftwareSerial conex_BT(10, 11); // Recuerda cruzar RX con TX void setup(){ pinMode(8, OUTPUT); // Configuramos pin 8 como salida pinMode(9, OUTPUT); // Configuramos pin 9 como salida cuando se alimente de aqui digitalWrite(9, HIGH); // Ponemos el pin Enable/Key en alto delay (500) ; // Espera un tiempo antes de alimentar el modulo Serial.begin(9600); // Velocidad de comunicaci\u00f3n con el monitor serie Serial.println(\"Alimentamos el modulo HC-05. Se habilita el modo AT\"); digitalWrite (8, HIGH); //Al poner en HIGH alimentamos el HC-05 y forzaremos el modo AT Serial.println(\"M\u00f3dulo listo para trabajar con comandos AT:\"); conex_BT.begin(38400); // Esta es la velocidad a la que est\u00e1 configurado el m\u00f3dulo } void loop(){ if (conex_BT.available()) Serial.write(conex_BT.read()); if (Serial.available()) conex_BT.write(Serial.read()); } En mi caso dispongo de un m\u00f3dulo configurado a una velocidad de 38400 baudios, de ah\u00ed la velocidad que establecemos para la conexi\u00f3n creada para los pines 10 y 11. Es importante entender que si cuando trabajemos con el c\u00f3digo el monitor serie nos devuelve caracteres extra\u00f1os o no responde a los comandos AT es porque esta velocidad ser\u00e1 otra diferente que debemos averiguar para poder continuar. Esto lo hacemos cambiando esta velocidad entre las posibles hasta que demos con la que el m\u00f3dulo responda. La otra velocidad que se configura es la de comunicaci\u00f3n con el monitor serie en el ordenador, que l\u00f3gicamente podemos cambiar pero que no es necesario para estas pruebas. Comandos AT para el HC-05 \u00b6 En las l\u00edneas siguientes se van poniendo diferentes comandos y una imagen de la respuesta que se obtiene a cada uno de ellos. AT \u00b6 El comando mas simple y primero que debemos probar antes de hacer nada mas es AT para verificar la comunicaci\u00f3n, es decir, comprobamos que nuestro m\u00f3dulo Bluetooth responde a comandos AT. Si tenemos una situaci\u00f3n como la de la imagen siguiente podemos seguir con el comando AT que nos interesa de los que damos a continuaci\u00f3n, o de otros que el lector puede estudiar, y si no debemos revisar cableado y velocidades de conexi\u00f3n. Respuesta al comando AT AT+VERSION? \u00b6 Consulta la versi\u00f3n del firmware del m\u00f3dulo AT+NAME? o AT+NAME=nnnn? \u00b6 Consulta o cambia el nombre del m\u00f3dulo AT+UART? o AT+UART=config \u00b6 El valor de config debe establecerse como: Baudios,Bit_parada,Paridad Este comando, en modo consulta nos va a devolver la velocidad de comunicaci\u00f3n con el m\u00f3dulo. En la imagen vemos una secuencia en la que hemos cambiado la velocidad de 38400 a 57600 (AT+UART=57600,0,0) por ejemplo con resultado OK. El tercer OK entre UART corresponde a un comando AT, que vemos que sigue funcionando. Tras ello volvemos a cambiar la velocidad a 38400 y comprobamos con AT que todo es correcto. En la animaci\u00f3n siguiente vemos el proceso. Consulta o cambia la velocidad de comunicaci\u00f3n con el m\u00f3dulo Las velocidades posibles son: 1200, 2400, 4800, 9600 (velocidad por defecto), 19200, 38400, 57600 o 115200 baudios. AT+PSWD? o AT+PSWD=\"nuevo-pin\" \u00b6 Consulta o cambio de la clave o PIN de emparejamiento AT+ROLE? o AT+ROLE=n \u00b6 Donde \"n\" puede tomar los siguientes valores: - 0 lo configura en modo esclavo - 1 lo configura en modo maestro Consulta o cambia el modo de operaci\u00f3n entre maestro y esclavo Otros comando AT \u00b6 Listamos los que pueden resultar \u00fatiles. AT+STATE? . El m\u00f3dulo responder\u00e1 con el estado actual AT+RESET . Reinicio del m\u00f3dulo AT+ORGL . Para devolver al m\u00f3dulo sus valores de f\u00e1brica AT+ADDR? . Devuelve la direcci\u00f3n f\u00edsica o MAC del m\u00f3dulo AT+IRQ . Escanea y muestra la MAC de dispositivos en el alcance AT+BIND=n . Establece la MAC del dispositivo al cual se conectar\u00e1 el m\u00f3dulo al encenderse AT+CMODE=n . Con n=0 se conecta a la direcci\u00f3n f\u00edsica establecida con AT+BIND y n=1 para conectarse a cualquier direcci\u00f3n dentro de la cobertura del m\u00f3dulo. Ejemplos de configuraci\u00f3n del m\u00f3dulo HT-05 \u00b6 Simplemente vamos a proponer dos ejemplos de configuraci\u00f3n de varios par\u00e1metros de un m\u00f3dulo HC-05 en los que deberemos verificar los cambios realizados. La principal diferencia entre un ejemplo y otro va estar en que en el primero vamos a poner al HC-05 en modo maestro y en el segundo en modo esclavo. Ejemplo 1. Role maestro \u00b6 Configurar un m\u00f3dulo HC-05 para que tenga las siguientes caracter\u00edsticas: Role o modo: Maestro Baud rate o velocidad: 57600 baudios Nombre del dispositivo: HC-05-Master PIN o c\u00f3digo de emparejamiento del disposito a conectarse: 1465 Antes de nada debemos poner nuestro m\u00f3dulo en modo AT para que pueda recibir los comandos de configuraci\u00f3n. A continuaci\u00f3n pongo la secuencia de comandos a enviar, debiendo todos ellos recibir como respuesta OK: AT AT+ROLE=1 AT+UART=57600,0,0 AT+NAME=HC-05-Master AT+PSWD=1465 AT+CMODE=0 Una vez realizadas las configuraciones procedemos a verificar que todos los pasos han sido correctos. Una vez comprobado puede ser recomendable hacer un reset (AT+RESET) del m\u00f3dulo para tenerlo con configuraci\u00f3n de f\u00e1brica la pr\u00f3xima vez que lo utilicemos. Ejemplo 2. Role esclavo \u00b6 Configurar un m\u00f3dulo HC-05 para que tenga las siguientes caracter\u00edsticas: Role o modo: Esclavo Baud rate o velocidad: 9600 baudios Nombre del dispositivo: HC-05-Slave PIN o c\u00f3digo de emparejamiento del disposito a conectarse: 1212 Antes de nada debemos poner nuestro m\u00f3dulo en modo AT para que pueda recibir los comandos de configuraci\u00f3n. A continuaci\u00f3n pongo la secuencia de comandos a enviar, debiendo todos ellos recibir como respuesta OK: AT AT+ROLE=0 AT+UART=9600,0,0 AT+NAME=HC-05-Slave AT+PSWD=1212 Una vez realizadas las configuraciones procedemos a verificar que todos los pasos han sido correctos. Una vez comprobado puede ser recomendable hacer un reset (AT+RESET) del m\u00f3dulo para tenerlo con configuraci\u00f3n de f\u00e1brica la pr\u00f3xima vez que lo utilicemos.","title":"M\u00f3dulo HC-05"},{"location":"at-05/#montajes-y-establecimiento-de-conexion","text":"En el caso del m\u00f3dulo HC-05 debemos proceder de manera diferente en funci\u00f3n de que el m\u00f3dulo disponga o no de un bot\u00f3n pulsador que permita establecer la comunicaci\u00f3n Bluetooth con el mismo.","title":"Montajes y establecimiento de conexi\u00f3n"},{"location":"at-05/#modulo-bluetooth-hc-05-con-boton","text":"Para este caso el montaje que debemos realizar lo vemos en la imagen siguiente: Conexi\u00f3n Arduino Nano-HC05 con bot\u00f3n pulsador El programa que podemos grabar en el Nano para esta ocasi\u00f3n lo vamos a diferenciar, creando uno para cada modo de funcionamiento. Modo AT2 . El programa es el siguiente: #include <SoftwareSerial.h> // Definimos una conexi\u00f3n utilizando la librer\u00eda SoftwareSerial conex_BT(10, 11); // Recuerda cruzar RX con TX void setup(){ Serial.begin(9600); // Velocidad de comunicaci\u00f3n con el monitor serie Serial.println(\"Alimentamos el modulo HC-05 mientras se mantiene presionado el pulsador\"); Serial println(\"De esta forma se habilita el modo AT2\"); Serial.println(\"El LED parpadea lentamente y el m\u00f3dulo listo para trabajar con comandos AT:\"); conex_BT.begin(38400); // Inicializa el puerto serie o consola } void loop(){ if (conex_BT.available()) Serial.write(conex_BT.read()); if (Serial.available()) conex_BT.write(Serial.read()); } Una vez subido el programa a nuestra placa tomamos el m\u00f3dulo BT y accionamos el pulsador y sin soltarlo procedemos a conectar la placa al puerto USB para alimentar ambos dispositivos. Tras un instante podemos observar que el LED parpadea lentamente indicando que estamos en modo AT2 y que podemos enviar comandos AT al mismo. En la imagen siguiente vemos el resultado de comprobar que todo es correcto obteniendo el primer OK como respuesta al comando AT. Tambi\u00e9n vemos la respuesta a otros comandos. Respuesta al comando AT en modo AT2 Ya podemos enviar cualquier comando AT de los que vemos en el apartado correspondiente. Modo AT1 . El programa que vamos a utilizar es el siguiente: #include <SoftwareSerial.h> // Definimos una conexi\u00f3n utilizando la librer\u00eda SoftwareSerial conex_BT(10, 11); // Recuerda cruzar RX con TX void setup(){ Serial.begin(9600); // Velocidad de comunicaci\u00f3n con el monitor serie Serial.println(\"Alimentamos el modulo HC-05\"); Serial.println(\"Accionamos el pulsador para entrar en el modo AT1\"); Serial.println(\"El LED continua parpadeando r\u00e1pidamente y el m\u00f3dulo est\u00e1 listo para trabajar con comandos AT\"); conex_BT.begin(115200); // Velocidad a la que est\u00e1 configurado el m\u00f3dulo } void loop(){ if (conex_BT.available()) Serial.write(conex_BT.read()); if (Serial.available()) conex_BT.write(Serial.read()); } Disponemos de un m\u00f3dulo previamente configurado a 115200 baudios, raz\u00f3n por la que ponemos la instrucci\u00f3n conex_BT.begin(115200); . Una vez subido el programa pulsamos el bot\u00f3n y probamos el funcionamiento, tal y como vemos en la imagen siguiente: Respuesta al comando AT en modo AT1","title":"M\u00f3dulo Bluetooth HC-05 CON bot\u00f3n"},{"location":"at-05/#modulo-bluetooth-hc-05-sin-boton","text":"Recordemos que para este caso debemos montar el circuito de la imagen siguiente: Conexi\u00f3n Arduino Nano-HC05 sin bot\u00f3n pulsador Para poder trabajar vamos a crear en el IDE de Arduino un programa como el siguiente: #include <SoftwareSerial.h> // Definimos una conexi\u00f3n utilizando la librer\u00eda SoftwareSerial conex_BT(10, 11); // Recuerda cruzar RX con TX void setup(){ pinMode(8, OUTPUT); // Configuramos pin 8 como salida pinMode(9, OUTPUT); // Configuramos pin 9 como salida cuando se alimente de aqui digitalWrite(9, HIGH); // Ponemos el pin Enable/Key en alto delay (500) ; // Espera un tiempo antes de alimentar el modulo Serial.begin(9600); // Velocidad de comunicaci\u00f3n con el monitor serie Serial.println(\"Alimentamos el modulo HC-05. Se habilita el modo AT\"); digitalWrite (8, HIGH); //Al poner en HIGH alimentamos el HC-05 y forzaremos el modo AT Serial.println(\"M\u00f3dulo listo para trabajar con comandos AT:\"); conex_BT.begin(38400); // Esta es la velocidad a la que est\u00e1 configurado el m\u00f3dulo } void loop(){ if (conex_BT.available()) Serial.write(conex_BT.read()); if (Serial.available()) conex_BT.write(Serial.read()); } En mi caso dispongo de un m\u00f3dulo configurado a una velocidad de 38400 baudios, de ah\u00ed la velocidad que establecemos para la conexi\u00f3n creada para los pines 10 y 11. Es importante entender que si cuando trabajemos con el c\u00f3digo el monitor serie nos devuelve caracteres extra\u00f1os o no responde a los comandos AT es porque esta velocidad ser\u00e1 otra diferente que debemos averiguar para poder continuar. Esto lo hacemos cambiando esta velocidad entre las posibles hasta que demos con la que el m\u00f3dulo responda. La otra velocidad que se configura es la de comunicaci\u00f3n con el monitor serie en el ordenador, que l\u00f3gicamente podemos cambiar pero que no es necesario para estas pruebas.","title":"M\u00f3dulo Bluetooth HC-05 SIN bot\u00f3n"},{"location":"at-05/#comandos-at-para-el-hc-05","text":"En las l\u00edneas siguientes se van poniendo diferentes comandos y una imagen de la respuesta que se obtiene a cada uno de ellos.","title":"Comandos AT para el HC-05"},{"location":"at-05/#at","text":"El comando mas simple y primero que debemos probar antes de hacer nada mas es AT para verificar la comunicaci\u00f3n, es decir, comprobamos que nuestro m\u00f3dulo Bluetooth responde a comandos AT. Si tenemos una situaci\u00f3n como la de la imagen siguiente podemos seguir con el comando AT que nos interesa de los que damos a continuaci\u00f3n, o de otros que el lector puede estudiar, y si no debemos revisar cableado y velocidades de conexi\u00f3n. Respuesta al comando AT","title":"AT"},{"location":"at-05/#atversion","text":"Consulta la versi\u00f3n del firmware del m\u00f3dulo","title":"AT+VERSION?"},{"location":"at-05/#atname-o-atnamennnn","text":"Consulta o cambia el nombre del m\u00f3dulo","title":"AT+NAME? o AT+NAME=nnnn?"},{"location":"at-05/#atuart-o-atuartconfig","text":"El valor de config debe establecerse como: Baudios,Bit_parada,Paridad Este comando, en modo consulta nos va a devolver la velocidad de comunicaci\u00f3n con el m\u00f3dulo. En la imagen vemos una secuencia en la que hemos cambiado la velocidad de 38400 a 57600 (AT+UART=57600,0,0) por ejemplo con resultado OK. El tercer OK entre UART corresponde a un comando AT, que vemos que sigue funcionando. Tras ello volvemos a cambiar la velocidad a 38400 y comprobamos con AT que todo es correcto. En la animaci\u00f3n siguiente vemos el proceso. Consulta o cambia la velocidad de comunicaci\u00f3n con el m\u00f3dulo Las velocidades posibles son: 1200, 2400, 4800, 9600 (velocidad por defecto), 19200, 38400, 57600 o 115200 baudios.","title":"AT+UART? o AT+UART=config"},{"location":"at-05/#atpswd-o-atpswdnuevo-pin","text":"Consulta o cambio de la clave o PIN de emparejamiento","title":"AT+PSWD? o AT+PSWD=\"nuevo-pin\""},{"location":"at-05/#atrole-o-atrolen","text":"Donde \"n\" puede tomar los siguientes valores: - 0 lo configura en modo esclavo - 1 lo configura en modo maestro Consulta o cambia el modo de operaci\u00f3n entre maestro y esclavo","title":"AT+ROLE? o AT+ROLE=n"},{"location":"at-05/#otros-comando-at","text":"Listamos los que pueden resultar \u00fatiles. AT+STATE? . El m\u00f3dulo responder\u00e1 con el estado actual AT+RESET . Reinicio del m\u00f3dulo AT+ORGL . Para devolver al m\u00f3dulo sus valores de f\u00e1brica AT+ADDR? . Devuelve la direcci\u00f3n f\u00edsica o MAC del m\u00f3dulo AT+IRQ . Escanea y muestra la MAC de dispositivos en el alcance AT+BIND=n . Establece la MAC del dispositivo al cual se conectar\u00e1 el m\u00f3dulo al encenderse AT+CMODE=n . Con n=0 se conecta a la direcci\u00f3n f\u00edsica establecida con AT+BIND y n=1 para conectarse a cualquier direcci\u00f3n dentro de la cobertura del m\u00f3dulo.","title":"Otros comando AT"},{"location":"at-05/#ejemplos-de-configuracion-del-modulo-ht-05","text":"Simplemente vamos a proponer dos ejemplos de configuraci\u00f3n de varios par\u00e1metros de un m\u00f3dulo HC-05 en los que deberemos verificar los cambios realizados. La principal diferencia entre un ejemplo y otro va estar en que en el primero vamos a poner al HC-05 en modo maestro y en el segundo en modo esclavo.","title":"Ejemplos de configuraci\u00f3n del m\u00f3dulo HT-05"},{"location":"at-05/#ejemplo-1-role-maestro","text":"Configurar un m\u00f3dulo HC-05 para que tenga las siguientes caracter\u00edsticas: Role o modo: Maestro Baud rate o velocidad: 57600 baudios Nombre del dispositivo: HC-05-Master PIN o c\u00f3digo de emparejamiento del disposito a conectarse: 1465 Antes de nada debemos poner nuestro m\u00f3dulo en modo AT para que pueda recibir los comandos de configuraci\u00f3n. A continuaci\u00f3n pongo la secuencia de comandos a enviar, debiendo todos ellos recibir como respuesta OK: AT AT+ROLE=1 AT+UART=57600,0,0 AT+NAME=HC-05-Master AT+PSWD=1465 AT+CMODE=0 Una vez realizadas las configuraciones procedemos a verificar que todos los pasos han sido correctos. Una vez comprobado puede ser recomendable hacer un reset (AT+RESET) del m\u00f3dulo para tenerlo con configuraci\u00f3n de f\u00e1brica la pr\u00f3xima vez que lo utilicemos.","title":"Ejemplo 1. Role maestro"},{"location":"at-05/#ejemplo-2-role-esclavo","text":"Configurar un m\u00f3dulo HC-05 para que tenga las siguientes caracter\u00edsticas: Role o modo: Esclavo Baud rate o velocidad: 9600 baudios Nombre del dispositivo: HC-05-Slave PIN o c\u00f3digo de emparejamiento del disposito a conectarse: 1212 Antes de nada debemos poner nuestro m\u00f3dulo en modo AT para que pueda recibir los comandos de configuraci\u00f3n. A continuaci\u00f3n pongo la secuencia de comandos a enviar, debiendo todos ellos recibir como respuesta OK: AT AT+ROLE=0 AT+UART=9600,0,0 AT+NAME=HC-05-Slave AT+PSWD=1212 Una vez realizadas las configuraciones procedemos a verificar que todos los pasos han sido correctos. Una vez comprobado puede ser recomendable hacer un reset (AT+RESET) del m\u00f3dulo para tenerlo con configuraci\u00f3n de f\u00e1brica la pr\u00f3xima vez que lo utilicemos.","title":"Ejemplo 2. Role esclavo"},{"location":"at-06/","text":"Montaje y establecimiento de conexi\u00f3n \u00b6 En el caso del m\u00f3dulo HC-06 debemos realizar el montaje que vemos en la imagen siguiente: Conexi\u00f3n Arduino Nano-HC06 En primer lugar recordemos que el m\u00f3dulo HC-06 se pone en modo AT cuando se alimenta y no est\u00e1 conectado con otro dispositivo. El programa que podemos grabar en el Nano para esta ocasi\u00f3n es totalmente similar a los vistos para el HC-05 y puede ser como el siguiente: #include <SoftwareSerial.h> // Definimos una conexi\u00f3n utilizando la librer\u00eda SoftwareSerial conex_BT(10, 11); // Recuerda cruzar RX con TX void setup(){ Serial.begin(9600); // Velocidad de comunicaci\u00f3n con el monitor serie Serial.println(\"Alimentamos el modulo HC-06\"); Serial.println(\"El m\u00f3dulo est\u00e1 listo para trabajar con comandos AT\"); conex_BT.begin(9600); // Velocidad a la que est\u00e1 configurado el m\u00f3dulo } void loop(){ if (conex_BT.available()) Serial.write(conex_BT.read()); if (Serial.available()) conex_BT.write(Serial.read()); } Una vez subido el programa a nuestra placa y si la velocidad de conexi\u00f3n Bluetooth establecida es correcta, alimentamos el sistema y el m\u00f3dulo estar\u00e1 listo para recibir comandos AT. En la imagen siguiente vemos el resultado de comprobar que todo es correcto obteniendo el primer OK como respuesta al comando AT. Respuesta al comando AT en m\u00f3dulo BT HC-06 Comandos AT para el HC-06 \u00b6 En las l\u00edneas siguientes se van poniendo diferentes comandos y una imagen de la respuesta que se obtiene a cada uno de ellos. AT \u00b6 El comando mas simple y primero que debemos probar antes de hacer nada mas es AT para verificar la comunicaci\u00f3n, es decir, comprobamos que nuestro m\u00f3dulo Bluetooth responde a comandos AT. Si tenemos una situaci\u00f3n como la de la imagen anterior podemos seguir con el comando AT que nos interesa de los que damos a continuaci\u00f3n, o de otros que el lector puede estudiar, y si no debemos revisar cableado y velocidades de conexi\u00f3n. AT+VERSION \u00b6 Consulta la versi\u00f3n del firmware del m\u00f3dulo AT+NAME o AT+NAMEnnnn \u00b6 Consulta o cambia el nombre del m\u00f3dulo Donde nnnn es sutituido por el nombre que queremos dar al dispositivo. Si por ejemplo escribimos AT+NAMERobot establecemos como nombre del m\u00f3dulo Robot y la respuesta ser\u00e1 la misma que la de la imagen anterior. Otros comando AT \u00b6 Listamos los que pueden resultar \u00fatiles. AT+BAUDvel . Para establecer la velocidad de comunicaci\u00f3n con el valor vel AT+PINxx . Para establecer el c\u00f3digo de vinculaci\u00f3n sustituimos xx por el c\u00f3digo deseado AT+PN . Configura la paridad como NONE en versiones superiores a la 1.5 AT+PO . Configura la paridad como ODD (impar) en versiones superiores a la 1.5 AT+PE . Configura la paridad como NONE (par) en versiones superiores a la 1.5","title":"M\u00f3dulo HC-06"},{"location":"at-06/#montaje-y-establecimiento-de-conexion","text":"En el caso del m\u00f3dulo HC-06 debemos realizar el montaje que vemos en la imagen siguiente: Conexi\u00f3n Arduino Nano-HC06 En primer lugar recordemos que el m\u00f3dulo HC-06 se pone en modo AT cuando se alimenta y no est\u00e1 conectado con otro dispositivo. El programa que podemos grabar en el Nano para esta ocasi\u00f3n es totalmente similar a los vistos para el HC-05 y puede ser como el siguiente: #include <SoftwareSerial.h> // Definimos una conexi\u00f3n utilizando la librer\u00eda SoftwareSerial conex_BT(10, 11); // Recuerda cruzar RX con TX void setup(){ Serial.begin(9600); // Velocidad de comunicaci\u00f3n con el monitor serie Serial.println(\"Alimentamos el modulo HC-06\"); Serial.println(\"El m\u00f3dulo est\u00e1 listo para trabajar con comandos AT\"); conex_BT.begin(9600); // Velocidad a la que est\u00e1 configurado el m\u00f3dulo } void loop(){ if (conex_BT.available()) Serial.write(conex_BT.read()); if (Serial.available()) conex_BT.write(Serial.read()); } Una vez subido el programa a nuestra placa y si la velocidad de conexi\u00f3n Bluetooth establecida es correcta, alimentamos el sistema y el m\u00f3dulo estar\u00e1 listo para recibir comandos AT. En la imagen siguiente vemos el resultado de comprobar que todo es correcto obteniendo el primer OK como respuesta al comando AT. Respuesta al comando AT en m\u00f3dulo BT HC-06","title":"Montaje y establecimiento de conexi\u00f3n"},{"location":"at-06/#comandos-at-para-el-hc-06","text":"En las l\u00edneas siguientes se van poniendo diferentes comandos y una imagen de la respuesta que se obtiene a cada uno de ellos.","title":"Comandos AT para el HC-06"},{"location":"at-06/#at","text":"El comando mas simple y primero que debemos probar antes de hacer nada mas es AT para verificar la comunicaci\u00f3n, es decir, comprobamos que nuestro m\u00f3dulo Bluetooth responde a comandos AT. Si tenemos una situaci\u00f3n como la de la imagen anterior podemos seguir con el comando AT que nos interesa de los que damos a continuaci\u00f3n, o de otros que el lector puede estudiar, y si no debemos revisar cableado y velocidades de conexi\u00f3n.","title":"AT"},{"location":"at-06/#atversion","text":"Consulta la versi\u00f3n del firmware del m\u00f3dulo","title":"AT+VERSION"},{"location":"at-06/#atname-o-atnamennnn","text":"Consulta o cambia el nombre del m\u00f3dulo Donde nnnn es sutituido por el nombre que queremos dar al dispositivo. Si por ejemplo escribimos AT+NAMERobot establecemos como nombre del m\u00f3dulo Robot y la respuesta ser\u00e1 la misma que la de la imagen anterior.","title":"AT+NAME o AT+NAMEnnnn"},{"location":"at-06/#otros-comando-at","text":"Listamos los que pueden resultar \u00fatiles. AT+BAUDvel . Para establecer la velocidad de comunicaci\u00f3n con el valor vel AT+PINxx . Para establecer el c\u00f3digo de vinculaci\u00f3n sustituimos xx por el c\u00f3digo deseado AT+PN . Configura la paridad como NONE en versiones superiores a la 1.5 AT+PO . Configura la paridad como ODD (impar) en versiones superiores a la 1.5 AT+PE . Configura la paridad como NONE (par) en versiones superiores a la 1.5","title":"Otros comando AT"},{"location":"comunica/","text":"Comunicaci\u00f3n entre un PC y un m\u00f3dulo Bluetooth \u00b6 Vamos a ver en detalle la forma mas usual y sencilla de establecer la comunicaci\u00f3n entre un m\u00f3dulo Bluetooth y un ordenador a trav\u00e9s de la conexi\u00f3n por puerto serie USB, es decir utilizando una placa Arduino. Tambien haremos referencia a como hacerlo a trav\u00e9s de un conversor USB a RS232 como por ejemplo el basado en un CP2102 como el de la imagen siguiente. En este enlace a NAYLAMP tienes informaci\u00f3n mas detallada del producto. Conversor CP2102 En la imagen siguiente vemos como conectar el m\u00f3dulo HC-05 al conversor, que a su vez va a un puerto USB del ordenador y a trav\u00e9s del monitor serie podremos establecer la comunicaci\u00f3n entre ambos para realizar las configuraciones oportunas mediante comandos AT, siempre que, claro est\u00e1, estemos en modo AT1 o AT2 o bien en modo desconectado si estamos con un HC-06. Conexi\u00f3n PC-CP2102-HC05 con bot\u00f3n pulsador Conexi\u00f3n entre Arduino Nano y HC-05 \u00b6 En este caso obviamos la conexi\u00f3n entre la placa Arduino y el ordenador que se hace con un cable USB apropiado. En la imagen siguiente tenemos el esquema de conexionado de la placa Nano con el HC05 en el caso de que nuestro dispositivo Bluetooth disponga de bot\u00f3n pulsador para habilitar el modo AT. L\u00f3gicamente los pines escogidos para TX y RX los podemos cambiar sin problema por otros pines digitales de la placa. Conexi\u00f3n Arduino Nano-HC05 Con esto ya tenemos la situaci\u00f3n para comenzar a configurar nuestro m\u00f3dulo HC-05 Si nuestro m\u00f3dulo no dispone de bot\u00f3n para habilitar el comando AT el esquema de conexionado que debemos seguir ser\u00e1 similar al de la imagen siguiente: Conexi\u00f3n Arduino Nano-HC05 sin bot\u00f3n pulsador Podemos observar como la alimentaci\u00f3n se lleva a un pin digital y adem\u00e1s se ha conectado la patilla Enable/Key. Recordemos que para que el HC-05 entre en modo AT, es necesario que cuando se alimente el modulo, el pin KEY este HIGH. Esto lo conseguimos por programaci\u00f3n conectando la tensi\u00f3n Vcc del m\u00f3dulo BlueTooth al pin 8 de nuestro Arduino. Lo que debemos hacer es poner el pin 9 en alto y tras un breve retardo hacemos lo mismo con el pin 8, lo que equivale a pulsar el bot\u00f3n mientras se enciende pero en este caso realizado por software. En el apartado comandos AT veremos el programa completo trabajando con m\u00f3dulos sin pulsador. Conexi\u00f3n entre Arduino Nano y HC-06 \u00b6 En la imagen siguiente tenemos el esquema de conexionado de la placa Nano con el HC06. Conexi\u00f3n Arduino Nano-HC06 En todos los casos en posible utilizar una placa Arduino diferente a la Nano, he escogido esta simplemente porque es la que ten\u00eda a mano. Tambi\u00e9n es posible trabajar con m\u00f3dulos ESP, aunque esto no lo vamos a tratar aqu\u00ed para no alargar estas notas resumen sobre configuraci\u00f3n de m\u00f3dulos Bluetooth HC-05 y HC-06.","title":"Comunicaci\u00f3n entre un PC y un m\u00f3dulo Bluetooth"},{"location":"comunica/#comunicacion-entre-un-pc-y-un-modulo-bluetooth","text":"Vamos a ver en detalle la forma mas usual y sencilla de establecer la comunicaci\u00f3n entre un m\u00f3dulo Bluetooth y un ordenador a trav\u00e9s de la conexi\u00f3n por puerto serie USB, es decir utilizando una placa Arduino. Tambien haremos referencia a como hacerlo a trav\u00e9s de un conversor USB a RS232 como por ejemplo el basado en un CP2102 como el de la imagen siguiente. En este enlace a NAYLAMP tienes informaci\u00f3n mas detallada del producto. Conversor CP2102 En la imagen siguiente vemos como conectar el m\u00f3dulo HC-05 al conversor, que a su vez va a un puerto USB del ordenador y a trav\u00e9s del monitor serie podremos establecer la comunicaci\u00f3n entre ambos para realizar las configuraciones oportunas mediante comandos AT, siempre que, claro est\u00e1, estemos en modo AT1 o AT2 o bien en modo desconectado si estamos con un HC-06. Conexi\u00f3n PC-CP2102-HC05 con bot\u00f3n pulsador","title":" Comunicaci\u00f3n entre un PC y un m\u00f3dulo Bluetooth "},{"location":"comunica/#conexion-entre-arduino-nano-y-hc-05","text":"En este caso obviamos la conexi\u00f3n entre la placa Arduino y el ordenador que se hace con un cable USB apropiado. En la imagen siguiente tenemos el esquema de conexionado de la placa Nano con el HC05 en el caso de que nuestro dispositivo Bluetooth disponga de bot\u00f3n pulsador para habilitar el modo AT. L\u00f3gicamente los pines escogidos para TX y RX los podemos cambiar sin problema por otros pines digitales de la placa. Conexi\u00f3n Arduino Nano-HC05 Con esto ya tenemos la situaci\u00f3n para comenzar a configurar nuestro m\u00f3dulo HC-05 Si nuestro m\u00f3dulo no dispone de bot\u00f3n para habilitar el comando AT el esquema de conexionado que debemos seguir ser\u00e1 similar al de la imagen siguiente: Conexi\u00f3n Arduino Nano-HC05 sin bot\u00f3n pulsador Podemos observar como la alimentaci\u00f3n se lleva a un pin digital y adem\u00e1s se ha conectado la patilla Enable/Key. Recordemos que para que el HC-05 entre en modo AT, es necesario que cuando se alimente el modulo, el pin KEY este HIGH. Esto lo conseguimos por programaci\u00f3n conectando la tensi\u00f3n Vcc del m\u00f3dulo BlueTooth al pin 8 de nuestro Arduino. Lo que debemos hacer es poner el pin 9 en alto y tras un breve retardo hacemos lo mismo con el pin 8, lo que equivale a pulsar el bot\u00f3n mientras se enciende pero en este caso realizado por software. En el apartado comandos AT veremos el programa completo trabajando con m\u00f3dulos sin pulsador.","title":" Conexi\u00f3n entre Arduino Nano y HC-05 "},{"location":"comunica/#conexion-entre-arduino-nano-y-hc-06","text":"En la imagen siguiente tenemos el esquema de conexionado de la placa Nano con el HC06. Conexi\u00f3n Arduino Nano-HC06 En todos los casos en posible utilizar una placa Arduino diferente a la Nano, he escogido esta simplemente porque es la que ten\u00eda a mano. Tambi\u00e9n es posible trabajar con m\u00f3dulos ESP, aunque esto no lo vamos a tratar aqu\u00ed para no alargar estas notas resumen sobre configuraci\u00f3n de m\u00f3dulos Bluetooth HC-05 y HC-06.","title":" Conexi\u00f3n entre Arduino Nano y HC-06 "},{"location":"intro-at/","text":"Comandos AT \u00b6 La compa\u00f1ia Hayes Communications desarroll\u00f3 un conjunto de comandos para configurar y conectar sus m\u00f3dems, que rapidamente se convirti\u00f3 en un est\u00e1ndar. Hayes es un lenguaje abierto de comandos. Los caracteres \"AT\", que preceden a todos los comandos, son acr\u00f3nimo de ATtention y significa \"Atenci\u00f3n\", lo que hizo que a este conjunto de comandos se le conociera como AT commands o comandos AT . Nosotros no vamos a profundizar en exceso en estos comando y simplemente vamos a ver los que habitualmente se utilizan con los m\u00f3dulos Bluetooth HC-05 y HC-06. Cuando carguemos el programa en nuestra placa Nano, abriremos el monitor serie y debemos configurar, para el caso del HC-05 como vemos en la imagen siguiente: Configuraci\u00f3n del monitor serie para HC05 Si estamos trabajando con un HC-06 la configuraci\u00f3n en el monitor serie debe ser la que vemos en la imagen siguiente: Configuraci\u00f3n del monitor serie para HC06","title":"Introducci\u00f3n"},{"location":"intro-at/#comandos-at","text":"La compa\u00f1ia Hayes Communications desarroll\u00f3 un conjunto de comandos para configurar y conectar sus m\u00f3dems, que rapidamente se convirti\u00f3 en un est\u00e1ndar. Hayes es un lenguaje abierto de comandos. Los caracteres \"AT\", que preceden a todos los comandos, son acr\u00f3nimo de ATtention y significa \"Atenci\u00f3n\", lo que hizo que a este conjunto de comandos se le conociera como AT commands o comandos AT . Nosotros no vamos a profundizar en exceso en estos comando y simplemente vamos a ver los que habitualmente se utilizan con los m\u00f3dulos Bluetooth HC-05 y HC-06. Cuando carguemos el programa en nuestra placa Nano, abriremos el monitor serie y debemos configurar, para el caso del HC-05 como vemos en la imagen siguiente: Configuraci\u00f3n del monitor serie para HC05 Si estamos trabajando con un HC-06 la configuraci\u00f3n en el monitor serie debe ser la que vemos en la imagen siguiente: Configuraci\u00f3n del monitor serie para HC06","title":" Comandos AT "},{"location":"modulos/","text":"M\u00f3dulos Bluetooth HC-05 y HC-06 \u00b6 Los m\u00f3dulos Bluetooth HC-05 y HC-06 admiten cambios en sus configuraciones como el nombre, velocidad, c\u00f3digo de vinculaci\u00f3n, etc. El HC-05 viene configurado por defecto de la siguiente forma: Modo o Role: Esclavo Nombre: HC-05 C\u00f3digo de emparejamiento: 1234 Velocidad: 9600 baudios El HC-06 viene configurado por defecto de la siguiente forma: Modo o Role: Esclavo y no se puede cambiar a Maestro Nombre: linvor o HC-06 C\u00f3digo de emparejamiento: 1234 Velocidad: 9600 baudios Antes de entrar en los modos de trabajo de cada uno de los m\u00f3dulos vamos a dar las definiciones de Maestro y Esclavo para el m\u00f3dulo HC-05. Maestro : Es el m\u00f3dulo HC-05 el que inicia la comunicaci\u00f3n. Como dispositivo Maestro solamente puede conectarse con un dispositivo Esclavo que debemos especificar. Esclavo : En esta forma est\u00e1 a la espera de que un dispositivo Maestro se conecte con \u00e9l. Es el modo mas usual cuando queremos conectarnos con un PC o telef\u00f3no m\u00f3vil. Modos de trabajo \u00b6 Aunque son bastante similares los modos de trabajo o estados de uno y otro son diferentes. Modos de trabajo del HC-05 \u00b6 El HC-05 dispone de cuatro modos, que son: Desconectado . El m\u00f3dulo entra en este estado cuando se alimenta o cuando NO se ha establecido una conexi\u00f3n Bluetooh con ning\u00fan dispositivo. El LED que incorpora el m\u00f3dulo parpadea r\u00e1pidamente. Conectado . Entra en este estado cuando se establece una conexi\u00f3n o comunicaci\u00f3n con otro dispositivo. El LED realiza un par de parpadeos. En este modo se establece una comunicaci\u00f3n conocida como transparente, debido a que todos los datos que reciba el m\u00f3dulo HC-05 por RX son transmitidos via Bluetooth al dispositivo conectado a trav\u00e9s de TX. Modo AT1 . Se entra en este estado cuando pulsamos el bot\u00f3n del HC-05 tras conectarlo y alimentarlo. En este estado se pueden enviar comandos AT a la misma velocidad que tenga configurada el m\u00f3dulo. El LED parpadea r\u00e1pidamente. Veremos en su momento que ocurre con los m\u00f3dulos que no disponen de este bot\u00f3n. Modo AT2 . Para entrar en este modo debemos mantener presionado el bot\u00f3n mientra se alimenta el m\u00f3dulo, y tras encender permanece en este estado aunque soltemos el bot\u00f3n. En este estado se deben enviar comandos AT a una velocidad de 38400 baudios, lo cual resulta bastante \u00fatil cuando olvidamos la velocidad a la que est\u00e1 configurado el m\u00f3dulo. El LED del m\u00f3dulo parpadea lentamente. En la imagen siguiente podemos observar la posici\u00f3n del LED al que nos referimos y la situaci\u00f3n del pulsador o bot\u00f3n del que hemos hablado. Tambi\u00e9n observamos que dos de los m\u00f3dulos no llevan implementado el citado pulsador. HC-05: Modelo 1 HC-05: Modelo 2 HC-05:Modelo 3 Con pulsador y LED Sin pulsador y LED en cara posterior Con LED y pad para pulsador pero si este Modos de trabajo del HC-06 \u00b6 El HC-06 dispone de dos modos o estados de funcionamiento, que son: Desconectado . El m\u00f3dulo entra en este estado cuando lo alimentamos o cuando no se ha establecido ninguna conexi\u00f3n Bluetooth con otro dispositivo. El LED del m\u00f3dulo parpadea con un periodo de 102 ms. En este modo se pueden enviar comandos AT al m\u00f3dulo. Conectado . El m\u00f3dulo entra en este modo cuando se establece una conexi\u00f3n con otro dispositivo Bluetooth. El LED permanece siempre encendido. En este modo se establece una comunicaci\u00f3n conocida como transparente, debido a que todos los datos que reciba el m\u00f3dulo HC-05 por RX son transmitidos via Bluetooth al dispositivo conectado a trav\u00e9s de TX. En este modo el HC-06 no puede interpretar comandos AT.","title":"M\u00f3dulos Bluetooth"},{"location":"modulos/#modulos-bluetooth-hc-05-y-hc-06","text":"Los m\u00f3dulos Bluetooth HC-05 y HC-06 admiten cambios en sus configuraciones como el nombre, velocidad, c\u00f3digo de vinculaci\u00f3n, etc. El HC-05 viene configurado por defecto de la siguiente forma: Modo o Role: Esclavo Nombre: HC-05 C\u00f3digo de emparejamiento: 1234 Velocidad: 9600 baudios El HC-06 viene configurado por defecto de la siguiente forma: Modo o Role: Esclavo y no se puede cambiar a Maestro Nombre: linvor o HC-06 C\u00f3digo de emparejamiento: 1234 Velocidad: 9600 baudios Antes de entrar en los modos de trabajo de cada uno de los m\u00f3dulos vamos a dar las definiciones de Maestro y Esclavo para el m\u00f3dulo HC-05. Maestro : Es el m\u00f3dulo HC-05 el que inicia la comunicaci\u00f3n. Como dispositivo Maestro solamente puede conectarse con un dispositivo Esclavo que debemos especificar. Esclavo : En esta forma est\u00e1 a la espera de que un dispositivo Maestro se conecte con \u00e9l. Es el modo mas usual cuando queremos conectarnos con un PC o telef\u00f3no m\u00f3vil.","title":" M\u00f3dulos Bluetooth HC-05 y HC-06 "},{"location":"modulos/#modos-de-trabajo","text":"Aunque son bastante similares los modos de trabajo o estados de uno y otro son diferentes.","title":" Modos de trabajo "},{"location":"modulos/#modos-de-trabajo-del-hc-05","text":"El HC-05 dispone de cuatro modos, que son: Desconectado . El m\u00f3dulo entra en este estado cuando se alimenta o cuando NO se ha establecido una conexi\u00f3n Bluetooh con ning\u00fan dispositivo. El LED que incorpora el m\u00f3dulo parpadea r\u00e1pidamente. Conectado . Entra en este estado cuando se establece una conexi\u00f3n o comunicaci\u00f3n con otro dispositivo. El LED realiza un par de parpadeos. En este modo se establece una comunicaci\u00f3n conocida como transparente, debido a que todos los datos que reciba el m\u00f3dulo HC-05 por RX son transmitidos via Bluetooth al dispositivo conectado a trav\u00e9s de TX. Modo AT1 . Se entra en este estado cuando pulsamos el bot\u00f3n del HC-05 tras conectarlo y alimentarlo. En este estado se pueden enviar comandos AT a la misma velocidad que tenga configurada el m\u00f3dulo. El LED parpadea r\u00e1pidamente. Veremos en su momento que ocurre con los m\u00f3dulos que no disponen de este bot\u00f3n. Modo AT2 . Para entrar en este modo debemos mantener presionado el bot\u00f3n mientra se alimenta el m\u00f3dulo, y tras encender permanece en este estado aunque soltemos el bot\u00f3n. En este estado se deben enviar comandos AT a una velocidad de 38400 baudios, lo cual resulta bastante \u00fatil cuando olvidamos la velocidad a la que est\u00e1 configurado el m\u00f3dulo. El LED del m\u00f3dulo parpadea lentamente. En la imagen siguiente podemos observar la posici\u00f3n del LED al que nos referimos y la situaci\u00f3n del pulsador o bot\u00f3n del que hemos hablado. Tambi\u00e9n observamos que dos de los m\u00f3dulos no llevan implementado el citado pulsador. HC-05: Modelo 1 HC-05: Modelo 2 HC-05:Modelo 3 Con pulsador y LED Sin pulsador y LED en cara posterior Con LED y pad para pulsador pero si este","title":"Modos de trabajo del HC-05"},{"location":"modulos/#modos-de-trabajo-del-hc-06","text":"El HC-06 dispone de dos modos o estados de funcionamiento, que son: Desconectado . El m\u00f3dulo entra en este estado cuando lo alimentamos o cuando no se ha establecido ninguna conexi\u00f3n Bluetooth con otro dispositivo. El LED del m\u00f3dulo parpadea con un periodo de 102 ms. En este modo se pueden enviar comandos AT al m\u00f3dulo. Conectado . El m\u00f3dulo entra en este modo cuando se establece una conexi\u00f3n con otro dispositivo Bluetooth. El LED permanece siempre encendido. En este modo se establece una comunicaci\u00f3n conocida como transparente, debido a que todos los datos que reciba el m\u00f3dulo HC-05 por RX son transmitidos via Bluetooth al dispositivo conectado a trav\u00e9s de TX. En este modo el HC-06 no puede interpretar comandos AT.","title":"Modos de trabajo del HC-06"},{"location":"Miscelanea/about/","text":"Autor \u00b6 Federico Coca GitHub Twitter Instagram Mas informaci\u00f3n","title":"Autor"},{"location":"Miscelanea/about/#autor","text":"Federico Coca GitHub Twitter Instagram Mas informaci\u00f3n","title":"Autor"},{"location":"Miscelanea/lic/","text":"Licencias \u00b6 Licencia MIT incluida en la creaci\u00f3n del repositorio. Creative Commons Atribuci\u00f3n-CompartirIgual 4.0 International (\"CC BY-SA\"). CC BY-SA 4.0","title":"Licencias"},{"location":"Miscelanea/lic/#licencias","text":"Licencia MIT incluida en la creaci\u00f3n del repositorio. Creative Commons Atribuci\u00f3n-CompartirIgual 4.0 International (\"CC BY-SA\"). CC BY-SA 4.0","title":"Licencias"},{"location":"Miscelanea/soft/","text":"Software utilizado \u00b6 Dibujo 3D FreeCAD Sistema operativo: Ubuntu 20.04.4 LTS (Focal Fossa) Paquete ofim\u00e1tico de referencia: LibreOffice Libreria Material para MkDocs Visual Studio Code Creaci\u00f3n de GIF animados para Ubuntu Peek Sistema principal de capturas de pantalla: Shutter Dibujo 2D vectorial Inkscape Retoque de im\u00e1genes GIMP Programaci\u00f3n por bloques con ArduinoBlocks Programaci\u00f3n mediante el IDE de Arduino","title":"Software utilizado"},{"location":"Miscelanea/soft/#software-utilizado","text":"Dibujo 3D FreeCAD Sistema operativo: Ubuntu 20.04.4 LTS (Focal Fossa) Paquete ofim\u00e1tico de referencia: LibreOffice Libreria Material para MkDocs Visual Studio Code Creaci\u00f3n de GIF animados para Ubuntu Peek Sistema principal de capturas de pantalla: Shutter Dibujo 2D vectorial Inkscape Retoque de im\u00e1genes GIMP Programaci\u00f3n por bloques con ArduinoBlocks Programaci\u00f3n mediante el IDE de Arduino","title":"Software utilizado"},{"location":"Miscelanea/webgrafia/","text":"Webgraf\u00eda y bibliograf\u00eda \u00b6 Wiki de documentaci\u00f3n de freecad Bluetooth - Wikipedia Blog Bluetooth Forum Arduino Web Departamento Tecnolog\u00eda IES Juan L\u00f3pez Morillas - J\u00f3dar Blog de Naylamp Mechatronics","title":"Webgrafia/Bibliograf\u00eda"},{"location":"Miscelanea/webgrafia/#webgrafia-y-bibliografia","text":"Wiki de documentaci\u00f3n de freecad Bluetooth - Wikipedia Blog Bluetooth Forum Arduino Web Departamento Tecnolog\u00eda IES Juan L\u00f3pez Morillas - J\u00f3dar Blog de Naylamp Mechatronics","title":"Webgraf\u00eda y bibliograf\u00eda"}]}